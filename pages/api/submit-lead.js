
export default async function handler(req, res) {
  console.log('üîÑ API /api/submit-lead chamada')
  console.log('üîç M√©todo:', req.method)
  console.log('üì• Headers:', req.headers)
  
  if (req.method !== 'POST') {
    console.log('‚ùå M√©todo n√£o permitido:', req.method)
    return res.status(405).json({ 
      success: false, 
      message: 'M√©todo n√£o permitido' 
    })
  }

  try {
    const data = req.body
    console.log('üìã Dados recebidos:', JSON.stringify(data, null, 2))

    // Valida√ß√£o rigorosa dos campos obrigat√≥rios
    const requiredFields = {
      nomeCompleto: 'Nome completo',
      whatsapp: 'WhatsApp',
      ultimaEmpresa: '√öltima empresa',
      tipoCarteira: 'Tipo de carteira',
      recebeuTudoCertinho: 'Recebeu tudo certinho',
      aceitaConsultoria: 'Aceita consultoria'
    }

    const errors = []
    
    for (const [field, label] of Object.entries(requiredFields)) {
      if (!data[field] || (typeof data[field] === 'string' && !data[field].trim())) {
        errors.push(`${label} √© obrigat√≥rio`)
        console.log(`‚ùå Campo obrigat√≥rio n√£o preenchido: ${field}`)
      }
    }

    if (errors.length > 0) {
      console.log('‚ùå Erros de valida√ß√£o:', errors)
      return res.status(400).json({
        success: false,
        message: errors.join(', '),
        errors: errors
      })
    }

    // Validar formato do WhatsApp
    const whatsappNumbers = data.whatsapp.replace(/\D/g, '')
    if (whatsappNumbers.length < 10 || whatsappNumbers.length > 11) {
      console.log('‚ùå WhatsApp inv√°lido:', data.whatsapp)
      return res.status(400).json({
        success: false,
        message: 'WhatsApp deve ter formato v√°lido (10 ou 11 d√≠gitos)'
      })
    }

    // Preparar dados para o backend
    const leadData = {
      nomeCompleto: data.nomeCompleto.trim(),
      whatsapp: data.whatsapp.trim(),
      ultimaEmpresa: data.ultimaEmpresa.trim(),
      tipoCarteira: data.tipoCarteira,
      recebeuTudoCertinho: data.recebeuTudoCertinho,
      situacoesDuranteTrabalho: data.situacoesDuranteTrabalho || [],
      aceitaConsultoria: data.aceitaConsultoria,
      vagaId: data.vagaId || 'sem-vaga',
      vagaTitulo: data.vagaTitulo || 'Vaga n√£o especificada',
      vagaEmpresa: data.vagaEmpresa || 'Empresa n√£o especificada',
      timestamp: new Date().toISOString(),
      fonte: 'Site do Trabalhador'
    }

    console.log('üì§ Enviando para backend:', JSON.stringify(leadData, null, 2))

    // Enviar para o backend
    const backendUrl = process.env.NEXT_PUBLIC_API_URL || 'https://worker-job-board-backend-leonardosilvas2.replit.app'
    const backendResponse = await fetch(`${backendUrl}/api/leads`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(leadData)
    })

    const backendResult = await backendResponse.json()
    
    console.log('üì® Resposta do backend:', backendResponse.status, backendResult)

    if (backendResponse.ok && backendResult.success) {
      console.log('‚úÖ Lead enviado com sucesso!')
      return res.status(200).json({
        success: true,
        message: 'Candidatura enviada com sucesso!',
        data: backendResult.data
      })
    } else {
      console.log('‚ùå Erro no backend:', backendResult)
      return res.status(500).json({
        success: false,
        message: backendResult.message || 'Erro ao processar candidatura'
      })
    }

  } catch (error) {
    console.error('‚ùå Erro na API submit-lead:', error)
    return res.status(500).json({
      success: false,
      message: 'Erro interno do servidor',
      error: error.message
    })
  }
}
