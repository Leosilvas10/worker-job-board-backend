"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/get-leads";
exports.ids = ["pages/api/get-leads"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fget-leads&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fget-leads.js&middlewareConfigBase64=e30%3D!":
/*!************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fget-leads&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fget-leads.js&middlewareConfigBase64=e30%3D! ***!
  \************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_get_leads_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/get-leads.js */ \"(api-node)/./pages/api/get-leads.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_get_leads_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_get_leads_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/get-leads\",\n        pathname: \"/api/get-leads\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_get_leads_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGZ2V0LWxlYWRzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZnZXQtbGVhZHMuanMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ0U7QUFDMUQ7QUFDcUQ7QUFDckQ7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLG9EQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxvREFBUTtBQUNwQztBQUNPLHdCQUF3Qix5R0FBbUI7QUFDbEQ7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9nZXQtbGVhZHMuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2dldC1sZWFkc1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2dldC1sZWFkc1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6ICcnLFxuICAgICAgICBmaWxlbmFtZTogJydcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fget-leads&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fget-leads.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/get-leads.js":
/*!********************************!*\
  !*** ./pages/api/get-leads.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n// API para listar leads capturados das candidaturas\n// Função para sanitizar caracteres especiais\nfunction sanitizeText(text) {\n    if (!text || typeof text !== 'string') return text;\n    return text// Corrigir caracteres especiais comuns\n    .replace(/�/g, 'ã').replace(/�/g, 'ç').replace(/�/g, 'é').replace(/�/g, 'á').replace(/�/g, 'í').replace(/�/g, 'ó').replace(/�/g, 'ú').replace(/�/g, 'ê').replace(/�/g, 'â').replace(/�/g, 'ô').replace(/�/g, 'à').replace(/�/g, 'õ').replace(/�/g, 'ü')// Corrigir caracteres maiúsculos\n    .replace(/�/g, 'Ã').replace(/�/g, 'Ç').replace(/�/g, 'É').replace(/�/g, 'Á').replace(/�/g, 'Í').replace(/�/g, 'Ó').replace(/�/g, 'Ú').replace(/�/g, 'Ê').replace(/�/g, 'Â').replace(/�/g, 'Ô').replace(/�/g, 'À').replace(/�/g, 'Õ')// Corrigir outros caracteres problemáticos\n    .replace(/Ã¡/g, 'á').replace(/Ã©/g, 'é').replace(/Ã­/g, 'í').replace(/Ã³/g, 'ó').replace(/Ãº/g, 'ú').replace(/Ã§/g, 'ç').replace(/Ã£/g, 'ã').replace(/Ãµ/g, 'õ').replace(/Ã /g, 'à').replace(/Ãª/g, 'ê').replace(/Ã¢/g, 'â').replace(/Ã´/g, 'ô');\n}\n// Função para sanitizar um objeto lead completo\nfunction sanitizeLead(lead) {\n    if (!lead) return lead;\n    const sanitized = {\n        ...lead\n    };\n    // Sanitizar campos de texto do lead\n    if (sanitized.nome) sanitized.nome = sanitizeText(sanitized.nome);\n    if (sanitized.email) sanitized.email = sanitizeText(sanitized.email);\n    if (sanitized.telefone) sanitized.telefone = sanitizeText(sanitized.telefone);\n    if (sanitized.cidade) sanitized.cidade = sanitizeText(sanitized.cidade);\n    if (sanitized.estado) sanitized.estado = sanitizeText(sanitized.estado);\n    if (sanitized.empresa) sanitized.empresa = sanitizeText(sanitized.empresa);\n    if (sanitized.vaga_titulo) sanitized.vaga_titulo = sanitizeText(sanitized.vaga_titulo);\n    if (sanitized.mensagem) sanitized.mensagem = sanitizeText(sanitized.mensagem);\n    if (sanitized.observacoes) sanitized.observacoes = sanitizeText(sanitized.observacoes);\n    if (sanitized.ultimo_emprego) sanitized.ultimo_emprego = sanitizeText(sanitized.ultimo_emprego);\n    if (sanitized.motivo_demissao) sanitized.motivo_demissao = sanitizeText(sanitized.motivo_demissao);\n    if (sanitized.disponibilidade) sanitized.disponibilidade = sanitizeText(sanitized.disponibilidade);\n    if (sanitized.pretensao_salarial) sanitized.pretensao_salarial = sanitizeText(sanitized.pretensao_salarial);\n    return sanitized;\n}\nasync function handler(req, res) {\n    if (req.method !== 'GET') {\n        return res.status(405).json({\n            success: false,\n            message: 'Método não permitido'\n        });\n    }\n    try {\n        // Buscar dados reais do backend em produção\n        const backendUrl = 'https://worker-job-board-backend-leonardosilvas2.replit.app';\n        console.log('🔍 Tentando conectar ao backend:', backendUrl);\n        let leadsReais = [];\n        try {\n            const backendResponse = await fetch(`${backendUrl}/api/leads`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    'User-Agent': 'SiteDoTrabalhador-Frontend'\n                }\n            });\n            const responseText = await backendResponse.text();\n            console.log('📡 Status da resposta do backend:', backendResponse.status);\n            console.log('📄 Resposta bruta:', responseText);\n            if (backendResponse.ok) {\n                let backendData;\n                try {\n                    backendData = JSON.parse(responseText);\n                } catch (parseError) {\n                    console.error('❌ Erro ao fazer parse da resposta:', parseError);\n                    throw new Error('Resposta inválida do backend');\n                }\n                console.log('📊 Dados completos do backend:', backendData);\n                // Verificar se há leads no array - suportando diferentes formatos de resposta\n                let leadsArray = [];\n                if (backendData.leads && Array.isArray(backendData.leads)) {\n                    leadsArray = backendData.leads;\n                } else if (backendData.data && Array.isArray(backendData.data)) {\n                    leadsArray = backendData.data;\n                } else if (Array.isArray(backendData)) {\n                    leadsArray = backendData;\n                }\n                if (leadsArray.length > 0) {\n                    console.log('✅', leadsArray.length, 'leads reais encontrados no backend');\n                    leadsReais = leadsArray.map((lead, index)=>{\n                        // Aplicar sanitização no lead antes de processar\n                        const cleanLead = sanitizeLead(lead);\n                        return {\n                            id: cleanLead.id || `lead_${index + 1}`,\n                            nome: cleanLead.nome || cleanLead.name || 'Nome não informado',\n                            telefone: cleanLead.telefone || cleanLead.phone || cleanLead.whatsapp || 'Telefone não informado',\n                            email: cleanLead.email || 'Email não informado',\n                            idade: cleanLead.idade || cleanLead.age || null,\n                            cidade: cleanLead.cidade || cleanLead.city || 'Não informado',\n                            estado: cleanLead.estado || cleanLead.state || 'Não informado',\n                            vaga: {\n                                id: cleanLead.vaga_id || cleanLead.job_id,\n                                titulo: cleanLead.vaga_titulo || cleanLead.job_title || 'Vaga de Interesse',\n                                empresa: cleanLead.empresa || cleanLead.vaga_empresa || cleanLead.company || 'Empresa não informada',\n                                localizacao: cleanLead.vaga_localizacao || cleanLead.location || `${cleanLead.cidade || 'Não informado'}, ${cleanLead.estado || 'Não informado'}`\n                            },\n                            // Dados da pesquisa trabalhista do backend\n                            pesquisaTrabalhista: {\n                                ultimaEmpresa: cleanLead.ultima_empresa || cleanLead.last_company || 'Não informado',\n                                tipoCarteira: cleanLead.tipo_carteira || cleanLead.work_status || 'Não informado',\n                                recebeuDireitos: cleanLead.recebeu_direitos || cleanLead.received_rights || 'Não informado',\n                                situacoesEnfrentadas: cleanLead.situacoes_enfrentadas || cleanLead.work_problems || 'Não informado',\n                                aceitaConsultoria: cleanLead.aceita_consultoria || cleanLead.wants_consultation || 'Não informado',\n                                verbas: {\n                                    fgts: cleanLead.fgts || 'Não informado',\n                                    ferias: cleanLead.ferias || 'Não informado',\n                                    decimoTerceiro: cleanLead.decimo_terceiro || 'Não informado',\n                                    horasExtras: cleanLead.horas_extras || 'Não informado',\n                                    verbas_rescisao: cleanLead.verbas_rescisao || 'Não informado'\n                                },\n                                problemas: {\n                                    assedio: cleanLead.assedio || 'Não informado',\n                                    humilhacoes: cleanLead.humilhacoes || 'Não informado',\n                                    acumulo_funcoes: cleanLead.acumulo_funcoes || 'Não informado',\n                                    sem_registro: cleanLead.sem_registro || 'Não informado',\n                                    atraso_salario: cleanLead.atraso_salario || 'Não informado'\n                                }\n                            },\n                            observacoes: cleanLead.observacoes || cleanLead.mensagem || cleanLead.message || 'Sem observações',\n                            fonte: cleanLead.fonte || cleanLead.source || 'site',\n                            utm: {\n                                source: cleanLead.utm_source || '',\n                                medium: cleanLead.utm_medium || '',\n                                campaign: cleanLead.utm_campaign || ''\n                            },\n                            status: cleanLead.status || 'novo',\n                            criadoEm: cleanLead.data_criacao || cleanLead.created_at || cleanLead.data_submissao || cleanLead.timestamp || new Date().toISOString(),\n                            contatado: cleanLead.contatado || false,\n                            convertido: cleanLead.convertido || false\n                        };\n                    });\n                } else {\n                    console.log('⚠️ Backend retornou array vazio ou sem leads');\n                    console.log('📋 Resposta completa do backend:', JSON.stringify(backendData, null, 2));\n                }\n            }\n        } catch (error) {\n            console.error('❌ Erro ao buscar leads do backend:', error.message);\n        }\n        // Dados de exemplo para demonstração (caso o backend esteja indisponível)\n        const exemploLeads = [\n            {\n                id: 1,\n                nome: 'Maria Silva Santos',\n                telefone: '(11) 98765-4321',\n                email: 'maria.santos@email.com',\n                idade: 35,\n                cidade: 'São Paulo',\n                estado: 'SP',\n                vaga: {\n                    id: 'job_1',\n                    titulo: 'Auxiliar de Limpeza',\n                    empresa: 'Empresa de Limpeza ABC',\n                    localizacao: 'São Paulo, SP'\n                },\n                profissional: {\n                    trabalhouAntes: true,\n                    ultimoEmprego: 'Diarista em residências',\n                    tempoUltimoEmprego: '2 anos',\n                    motivoDemissao: 'Família mudou de cidade',\n                    salarioAnterior: 'R$ 1.400,00',\n                    experienciaAnos: 8,\n                    disponibilidade: 'Integral',\n                    pretensaoSalarial: 'R$ 1.600,00'\n                },\n                observacoes: 'Tenho experiência com limpeza pesada e delicada',\n                fonte: 'site',\n                utm: {\n                    source: 'google',\n                    medium: 'organic',\n                    campaign: ''\n                },\n                status: 'novo',\n                criadoEm: new Date(Date.now() - 86400000).toISOString(),\n                contatado: false,\n                convertido: false\n            },\n            {\n                id: 2,\n                nome: 'João Carlos Oliveira',\n                telefone: '(11) 97654-3210',\n                email: 'joao.oliveira@email.com',\n                idade: 42,\n                cidade: 'São Paulo',\n                estado: 'SP',\n                vaga: {\n                    id: 'job_2',\n                    titulo: 'Porteiro',\n                    empresa: 'Condomínio Residencial',\n                    localizacao: 'São Paulo, SP'\n                },\n                profissional: {\n                    trabalhouAntes: true,\n                    ultimoEmprego: 'Segurança em shopping',\n                    tempoUltimoEmprego: '3 anos',\n                    motivoDemissao: 'Demitido sem justa causa - corte de custos',\n                    salarioAnterior: 'R$ 1.800,00',\n                    experienciaAnos: 12,\n                    disponibilidade: 'Escala 12x36',\n                    pretensaoSalarial: 'R$ 1.700,00'\n                },\n                observacoes: 'Experiência com controle de acesso e CFTV',\n                fonte: 'site',\n                utm: {\n                    source: 'facebook',\n                    medium: 'social',\n                    campaign: 'vagas-porteiro'\n                },\n                status: 'contatado',\n                criadoEm: new Date(Date.now() - 172800000).toISOString(),\n                contatado: true,\n                convertido: false\n            },\n            {\n                id: 3,\n                nome: 'Ana Paula Costa',\n                telefone: '(11) 96543-2109',\n                email: 'ana.costa@email.com',\n                idade: 28,\n                cidade: 'Guarulhos',\n                estado: 'SP',\n                vaga: {\n                    id: 'job_3',\n                    titulo: 'Cuidadora de Idosos',\n                    empresa: 'Home Care Assistência',\n                    localizacao: 'São Paulo, SP'\n                },\n                profissional: {\n                    trabalhouAntes: true,\n                    ultimoEmprego: 'Auxiliar de enfermagem',\n                    tempoUltimoEmprego: '1 ano e 6 meses',\n                    motivoDemissao: 'Pediu demissão - busca melhor oportunidade',\n                    salarioAnterior: 'R$ 1.500,00',\n                    experienciaAnos: 5,\n                    disponibilidade: 'Plantão 24h',\n                    pretensaoSalarial: 'R$ 1.800,00'\n                },\n                observacoes: 'Curso técnico em enfermagem, experiência com idosos',\n                fonte: 'whatsapp',\n                utm: {\n                    source: 'whatsapp',\n                    medium: 'referral',\n                    campaign: ''\n                },\n                status: 'convertido',\n                criadoEm: new Date(Date.now() - 259200000).toISOString(),\n                contatado: true,\n                convertido: true\n            }\n        ];\n        // Priorizar leads reais do backend, com dados de exemplo como fallback\n        let allLeads = [];\n        if (leadsReais.length > 0) {\n            // Se temos leads reais do backend, usar eles\n            allLeads = [\n                ...leadsReais\n            ];\n            console.log(`✅ ${leadsReais.length} leads reais carregados do backend`);\n        } else {\n            // Fallback para dados de exemplo se backend indisponível\n            allLeads = [\n                ...exemploLeads\n            ];\n            console.log(`⚠️ Usando ${exemploLeads.length} leads de exemplo (backend indisponível)`);\n        }\n        // Estatísticas dos leads\n        const stats = {\n            total: allLeads.length,\n            novos: allLeads.filter((lead)=>lead.status === 'novo').length,\n            contatados: allLeads.filter((lead)=>lead.contatado).length,\n            convertidos: allLeads.filter((lead)=>lead.convertido).length,\n            hoje: allLeads.filter((lead)=>{\n                const hoje = new Date().toDateString();\n                const leadDate = new Date(lead.criadoEm).toDateString();\n                return hoje === leadDate;\n            }).length,\n            porFonte: {\n                site: allLeads.filter((lead)=>lead.fonte === 'site').length,\n                whatsapp: allLeads.filter((lead)=>lead.fonte === 'whatsapp').length,\n                facebook: allLeads.filter((lead)=>lead.utm.source === 'facebook').length,\n                google: allLeads.filter((lead)=>lead.utm.source === 'google').length\n            },\n            // Análise de demissões (dado valioso!)\n            motivosDemissao: {\n                'sem-justa-causa': allLeads.filter((lead)=>lead.profissional.motivoDemissao?.toLowerCase().includes('demitido') || lead.profissional.motivoDemissao?.toLowerCase().includes('justa causa')).length,\n                'pediu-demissao': allLeads.filter((lead)=>lead.profissional.motivoDemissao?.toLowerCase().includes('pediu') || lead.profissional.motivoDemissao?.toLowerCase().includes('saiu')).length,\n                'fim-contrato': allLeads.filter((lead)=>lead.profissional.motivoDemissao?.toLowerCase().includes('contrato') || lead.profissional.motivoDemissao?.toLowerCase().includes('temporário')).length,\n                'outros': allLeads.filter((lead)=>lead.profissional.motivoDemissao && !lead.profissional.motivoDemissao.toLowerCase().includes('demitido') && !lead.profissional.motivoDemissao.toLowerCase().includes('pediu') && !lead.profissional.motivoDemissao.toLowerCase().includes('contrato')).length\n            }\n        };\n        return res.status(200).json({\n            success: true,\n            leads: allLeads.sort((a, b)=>new Date(b.criadoEm) - new Date(a.criadoEm)),\n            stats: stats,\n            message: `${allLeads.length} leads encontrados`\n        });\n    } catch (error) {\n        console.error('❌ Erro ao buscar leads:', error);\n        return res.status(500).json({\n            success: false,\n            message: 'Erro ao carregar leads',\n            leads: [],\n            stats: {},\n            error:  true ? error.message : 0\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/get-leads.js\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fget-leads&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fget-leads.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();