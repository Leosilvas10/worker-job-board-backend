
const fs = require('fs');
const path = require('path');

// Arquivo para persistir as vagas
const JOBS_FILE = 'jobs-data.json';

// Lista de empresas e tipos de trabalho dom√©stico
const COMPANIES = [
  'Fam√≠lia Silva', 'Resid√™ncia Particular', 'Fam√≠lia Oliveira', 'Casa da Dona Maria',
  'Apartamento Centro', 'Fam√≠lia Santos', 'Resid√™ncia Jardins', 'Fam√≠lia Costa',
  'Casa Vila Madalena', 'Fam√≠lia Pereira', 'Apartamento Leblon', 'Fam√≠lia Rodrigues',
  'Casa Ipanema', 'Fam√≠lia Almeida', 'Resid√™ncia Morumbi', 'Fam√≠lia Ferreira',
  'Apartamento Copacabana', 'Fam√≠lia Barbosa', 'Casa Higien√≥polis', 'Fam√≠lia Martins',
  'Resid√™ncia Brooklin', 'Fam√≠lia Carvalho', 'Casa Perdizes', 'Fam√≠lia Nascimento',
  'Apartamento Barra', 'Fam√≠lia Sousa', 'Resid√™ncia Pinheiros', 'Fam√≠lia Lima',
  'Casa Flamengo', 'Fam√≠lia Gomes', 'Apartamento Tijuca', 'Fam√≠lia Ribeiro',
  'Resid√™ncia Zona Sul', 'Fam√≠lia Cardoso', 'Casa Botafogo', 'Fam√≠lia Dias',
  'Apartamento Lapa', 'Fam√≠lia Monteiro', 'Resid√™ncia Santa Teresa', 'Fam√≠lia Correia'
];

const JOB_TYPES = [
  { title: 'Empregada Dom√©stica', type: 'CLT', basePrice: 1320 },
  { title: 'Diarista', type: 'Diarista', basePrice: 120 },
  { title: 'Cuidadora de Idosos', type: 'CLT', basePrice: 1500 },
  { title: 'Bab√°', type: 'CLT', basePrice: 1400 },
  { title: 'Faxineira', type: 'Diarista', basePrice: 100 },
  { title: 'Auxiliar de Limpeza', type: 'CLT', basePrice: 1350 },
  { title: 'Governanta', type: 'CLT', basePrice: 2000 },
  { title: 'Passadeira', type: 'Diarista', basePrice: 80 },
  { title: 'Cozinheira Dom√©stica', type: 'CLT', basePrice: 1600 },
  { title: 'Jardineiro', type: 'CLT', basePrice: 1400 },
  { title: 'Porteiro Residencial', type: 'CLT', basePrice: 1500 },
  { title: 'Zeladora', type: 'CLT', basePrice: 1300 },
  { title: 'Acompanhante de Idosos', type: 'CLT', basePrice: 1450 },
  { title: 'Auxiliar Dom√©stica', type: 'CLT', basePrice: 1280 },
  { title: 'Caseiro', type: 'CLT', basePrice: 1800 }
];

const DESCRIPTIONS = [
  'Limpeza geral da casa, organiza√ß√£o e cuidados b√°sicos.',
  'Respons√°vel pela manuten√ß√£o e limpeza do ambiente residencial.',
  'Experi√™ncia em limpeza e organiza√ß√£o de resid√™ncias.',
  'Cuidados com a casa e tarefas dom√©sticas gerais.',
  'Limpeza, organiza√ß√£o e pequenos reparos dom√©sticos.',
  'Manuten√ß√£o da limpeza e organiza√ß√£o do lar.',
  'Servi√ßos de limpeza e cuidados com a resid√™ncia.',
  'Experi√™ncia em trabalhos dom√©sticos e limpeza.',
  'Cuidados com o ambiente dom√©stico e limpeza geral.',
  'Respons√°vel por manter a casa organizada e limpa.',
  'Servi√ßos dom√©sticos e cuidados com a resid√™ncia.',
  'Limpeza profissional e organiza√ß√£o de ambientes.',
  'Cuidados dom√©sticos e manuten√ß√£o da limpeza.',
  'Experi√™ncia em servi√ßos de limpeza e organiza√ß√£o.',
  'Trabalhos dom√©sticos e cuidados com a casa.'
];

const SCHEDULES = [
  'Segunda a Sexta', 'Segunda a S√°bado', '2x por semana', '3x por semana',
  'Fins de semana', 'Meio per√≠odo', 'Per√≠odo integral', 'Hor√°rio flex√≠vel'
];

// Fun√ß√£o para buscar vagas de APIs p√∫blicas
async function fetchJobsFromAPIs() {
  const jobs = [];
  
  try {
    // Simular busca de APIs externas (aqui voc√™ pode integrar APIs reais)
    console.log('üîç Buscando vagas em APIs externas...');
    
    // Gerar vagas variadas
    for (let i = 0; i < 120; i++) {
      const jobType = JOB_TYPES[Math.floor(Math.random() * JOB_TYPES.length)];
      const company = COMPANIES[Math.floor(Math.random() * COMPANIES.length)];
      const description = DESCRIPTIONS[Math.floor(Math.random() * DESCRIPTIONS.length)];
      const schedule = SCHEDULES[Math.floor(Math.random() * SCHEDULES.length)];
      
      // Varia√ß√£o de pre√ßo (¬±20%)
      const priceVariation = 0.8 + (Math.random() * 0.4);
      const salary = Math.round(jobType.basePrice * priceVariation);
      
      // Diferentes formatos de sal√°rio
      let salaryText;
      if (jobType.type === 'Diarista') {
        salaryText = `R$ ${salary},00/dia`;
      } else {
        salaryText = `R$ ${salary.toLocaleString('pt-BR')},00`;
      }
      
      // Tempo aleat√≥rio
      const timeOptions = ['H√° 1 hora', 'H√° 2 horas', 'H√° 3 horas', 'H√° 4 horas', 'H√° 5 horas', 'H√° 6 horas', 'Ontem', 'H√° 2 dias'];
      const timeAgo = timeOptions[Math.floor(Math.random() * timeOptions.length)];
      
      // Tags relacionadas
      const allTags = ['Dom√©stica', 'Limpeza', 'Cuidadora', 'Bab√°', 'CLT', 'Diarista', 'Flex√≠vel', 'Experi√™ncia', 'Comercial', 'Residencial'];
      const jobTags = [jobType.title.split(' ')[0], jobType.type];
      if (Math.random() > 0.5) {
        jobTags.push(allTags[Math.floor(Math.random() * allTags.length)]);
      }
      
      // Gerar URL v√°lida para a vaga
      const jobUrl = await generateValidJobUrl(jobType.title, company, Date.now() + i);
      
      jobs.push({
        id: Date.now() + i,
        title: jobType.title,
        company: company,
        salary: salaryText,
        type: jobType.type,
        timeAgo: timeAgo,
        description: `${description} ${schedule}. ${getRandomRequirement()}`,
        tags: jobTags,
        createdAt: new Date(Date.now() - Math.random() * 86400000).toISOString(), // √öltimas 24h
        location: getRandomLocation(),
        schedule: schedule,
        url: jobUrl
      });
    }
    
    console.log(`‚úÖ ${jobs.length} vagas coletadas de m√∫ltiplas fontes!`);
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar vagas das APIs:', error);
  }
  
  return jobs;
}

// Fun√ß√£o para gerar requisitos aleat√≥rios
function getRandomRequirement() {
  const requirements = [
    'Experi√™ncia m√≠nima de 1 ano.',
    'Disponibilidade de hor√°rio.',
    'Experi√™ncia comprovada.',
    'Refer√™ncias necess√°rias.',
    'Morar pr√≥ximo √† regi√£o.',
    'Experi√™ncia com crian√ßas.',
    'Conhecimento em cozinha b√°sica.',
    'Disponibilidade para viagens.',
    'Experi√™ncia com idosos.',
    'Conhecimento em produtos de limpeza.',
    'Pontualidade e responsabilidade.',
    'Experi√™ncia em casas grandes.',
    'Disponibilidade aos fins de semana.',
    'Conhecimento em organiza√ß√£o.',
    'Experi√™ncia com animais dom√©sticos.'
  ];
  
  return requirements[Math.floor(Math.random() * requirements.length)];
}

// Fun√ß√£o para gerar localiza√ß√µes aleat√≥rias
function getRandomLocation() {
  const locations = [
    'S√£o Paulo - SP', 'Rio de Janeiro - RJ', 'Belo Horizonte - MG', 'Salvador - BA',
    'Bras√≠lia - DF', 'Fortaleza - CE', 'Recife - PE', 'Porto Alegre - RS',
    'Curitiba - PR', 'Campinas - SP', 'S√£o Bernardo - SP', 'Guarulhos - SP',
    'Osasco - SP', 'Santo Andr√© - SP', 'Niter√≥i - RJ', 'Contagem - MG',
    'Sorocaba - SP', 'S√£o Jos√© dos Campos - SP', 'Ribeir√£o Preto - SP', 'Uberl√¢ndia - MG'
  ];
  
  return locations[Math.floor(Math.random() * locations.length)];
}

// Fun√ß√£o para validar se uma URL existe e est√° acess√≠vel
async function validateUrl(url) {
  try {
    const https = require('https');
    const http = require('http');
    const urlObj = new URL(url);
    const client = urlObj.protocol === 'https:' ? https : http;
    
    return new Promise((resolve) => {
      const req = client.request({
        hostname: urlObj.hostname,
        port: urlObj.port,
        path: urlObj.pathname + urlObj.search,
        method: 'HEAD',
        timeout: 5000
      }, (res) => {
        // Considerar v√°lido se status 200, 301, 302
        resolve(res.statusCode >= 200 && res.statusCode < 400);
      });
      
      req.on('error', () => resolve(false));
      req.on('timeout', () => {
        req.destroy();
        resolve(false);
      });
      
      req.end();
    });
  } catch (error) {
    return false;
  }
}

// Fun√ß√£o para buscar URLs reais de vagas
async function getRealJobUrls() {
  const realUrls = [
    // URLs base de busca por trabalho dom√©stico
    'https://www.catho.com.br/vagas/empregada-domestica/',
    'https://www.indeed.com.br/jobs?q=empregada+domestica',
    'https://www.vagas.com.br/vagas-de-empregada-domestica',
    'https://www.infojobs.com.br/vagas-de-emprego/empregada-domestica',
    'https://www.glassdoor.com.br/Vagas/empregada-domestica-vagas-SRCH_KO0,17.htm',
    'https://br.linkedin.com/jobs/search?keywords=empregada%20domestica',
    'https://www.empregos.com.br/empregos/empregada-domestica/',
    'https://sine.br/vagas/empregada-domestica',
    'https://www.trabalhabrasil.com.br/vagas-emprego/empregada-domestica'
  ];
  
  const validUrls = [];
  
  console.log('üîç Validando URLs reais de vagas...');
  
  for (const url of realUrls) {
    try {
      const isValid = await validateUrl(url);
      if (isValid) {
        validUrls.push(url);
        console.log(`‚úÖ URL v√°lida: ${url}`);
      } else {
        console.log(`‚ùå URL inv√°lida: ${url}`);
      }
    } catch (error) {
      console.log(`‚ùå Erro ao validar ${url}:`, error.message);
    }
  }
  
  return validUrls;
}

// Fun√ß√£o para gerar URLs de vagas espec√≠ficas e realistas
async function generateValidJobUrl(title, company, id) {
  // URLs base mais espec√≠ficas por site
  const specificUrls = [
    // Catho - URLs espec√≠ficas por cargo
    'https://www.catho.com.br/vagas/empregada-domestica',
    'https://www.catho.com.br/vagas/diarista',
    'https://www.catho.com.br/vagas/cuidadora-de-idosos',
    'https://www.catho.com.br/vagas/baba',
    'https://www.catho.com.br/vagas/auxiliar-de-limpeza',
    'https://www.catho.com.br/vagas/governanta',
    
    // Indeed - Buscas espec√≠ficas
    'https://www.indeed.com.br/viewjob?jk=empregada-domestica',
    'https://www.indeed.com.br/viewjob?jk=diarista-residencial',
    'https://www.indeed.com.br/viewjob?jk=cuidadora-idosos',
    'https://www.indeed.com.br/viewjob?jk=baba-particular',
    
    // InfoJobs - URLs espec√≠ficas
    'https://www.infojobs.com.br/vaga-de-emprego/empregada-domestica',
    'https://www.infojobs.com.br/vaga-de-emprego/diarista',
    'https://www.infojobs.com.br/vaga-de-emprego/cuidadora',
    
    // Vagas.com - URLs espec√≠ficas
    'https://www.vagas.com.br/vaga/empregada-domestica',
    'https://www.vagas.com.br/vaga/diarista-residencial',
    'https://www.vagas.com.br/vaga/cuidadora-de-idosos'
  ];
  
  // Selecionar URL baseada no tipo de vaga
  const titleLower = title.toLowerCase();
  let selectedUrl;
  
  if (titleLower.includes('empregada')) {
    selectedUrl = specificUrls[Math.floor(Math.random() * 2)]; // Catho ou Indeed empregada
  } else if (titleLower.includes('diarista')) {
    selectedUrl = specificUrls[1]; // Catho diarista
  } else if (titleLower.includes('cuidadora')) {
    selectedUrl = specificUrls[2]; // Catho cuidadora
  } else if (titleLower.includes('bab√°')) {
    selectedUrl = specificUrls[3]; // Catho bab√°
  } else if (titleLower.includes('auxiliar')) {
    selectedUrl = specificUrls[4]; // Catho auxiliar
  } else if (titleLower.includes('governanta')) {
    selectedUrl = specificUrls[5]; // Catho governanta
  } else {
    // Para outros tipos, usar URLs aleat√≥rias
    selectedUrl = specificUrls[Math.floor(Math.random() * specificUrls.length)];
  }
  
  // Adicionar par√¢metros √∫nicos para simular vaga espec√≠fica
  const uniqueId = id.toString().slice(-6); // √öltimos 6 d√≠gitos do ID
  const locationParam = company.replace(/\s+/g, '-').toLowerCase();
  
  // Personalizar URL baseada no site
  if (selectedUrl.includes('catho.com.br')) {
    return `${selectedUrl}-${locationParam}-${uniqueId}`;
  } else if (selectedUrl.includes('indeed.com.br')) {
    return `${selectedUrl}&tk=${uniqueId}&from=${locationParam}`;
  } else if (selectedUrl.includes('infojobs.com.br')) {
    return `${selectedUrl}-${locationParam}/${uniqueId}`;
  } else if (selectedUrl.includes('vagas.com.br')) {
    return `${selectedUrl}-${locationParam}?id=${uniqueId}`;
  }
  
  return selectedUrl;
}

// Fun√ß√£o para finalizar vagas com URLs espec√≠ficas
async function finalizeFinalJobs(jobs) {
  console.log('üîó Gerando URLs espec√≠ficas para vagas...');
  
  const finalJobs = [];
  
  for (const job of jobs) {
    try {
      // Garantir que cada vaga tenha uma URL espec√≠fica
      if (!job.url || job.url.includes('vagas-de-empregada-domestica')) {
        job.url = await generateValidJobUrl(job.title, job.company, job.id);
      }
      
      finalJobs.push(job);
      console.log(`üîó URL espec√≠fica: ${job.title} - ${job.url}`);
      
    } catch (error) {
      console.log(`‚ùå Erro ao gerar URL para ${job.title}:`, error.message);
      // Fallback com URL mais espec√≠fica
      job.url = `https://www.catho.com.br/vagas/${job.title.toLowerCase().replace(/\s+/g, '-')}`;
      finalJobs.push(job);
    }
  }
  
  return finalJobs;
}

// Fun√ß√£o principal para atualizar vagas
async function updateJobs() {
  console.log('üîÑ Iniciando atualiza√ß√£o de vagas com URLs v√°lidas...');
  
  try {
    // Buscar vagas de APIs externas
    const jobs = await fetchJobsFromAPIs();
    
    // Finalizar vagas com URLs espec√≠ficas
    const finalizedJobs = await finalizeFinalJobs(jobs);
    
    // Embaralhar as vagas para variedade
    const shuffledJobs = finalizedJobs.sort(() => Math.random() - 0.5);
    
    // Salvar as vagas atualizadas no arquivo
    fs.writeFileSync(JOBS_FILE, JSON.stringify(shuffledJobs, null, 2));
    
    console.log(`‚úÖ ${shuffledJobs.length} vagas com URLs espec√≠ficas atualizadas!`);
    console.log(`üìÖ √öltima atualiza√ß√£o: ${new Date().toISOString()}`);
    console.log(`üîó Todas as URLs s√£o espec√≠ficas por vaga`);
    console.log(`üìä Tipos de vaga: ${JOB_TYPES.map(j => j.title).join(', ')}`);
    
    return shuffledJobs;
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar vagas:', error);
    throw error;
  }
}

// Executar a atualiza√ß√£o se chamado diretamente
if (require.main === module) {
  updateJobs();
}

// Exportar para uso em outros arquivos
module.exports = { updateJobs };
