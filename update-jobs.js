
const fs = require('fs');
const path = require('path');

// Arquivo para persistir as vagas
const JOBS_FILE = 'jobs-data.json';

// Lista de empresas e tipos de trabalho dom√©stico
const COMPANIES = [
  'Fam√≠lia Silva', 'Resid√™ncia Particular', 'Fam√≠lia Oliveira', 'Casa da Dona Maria',
  'Apartamento Centro', 'Fam√≠lia Santos', 'Resid√™ncia Jardins', 'Fam√≠lia Costa',
  'Casa Vila Madalena', 'Fam√≠lia Pereira', 'Apartamento Leblon', 'Fam√≠lia Rodrigues',
  'Casa Ipanema', 'Fam√≠lia Almeida', 'Resid√™ncia Morumbi', 'Fam√≠lia Ferreira',
  'Apartamento Copacabana', 'Fam√≠lia Barbosa', 'Casa Higien√≥polis', 'Fam√≠lia Martins',
  'Resid√™ncia Brooklin', 'Fam√≠lia Carvalho', 'Casa Perdizes', 'Fam√≠lia Nascimento',
  'Apartamento Barra', 'Fam√≠lia Sousa', 'Resid√™ncia Pinheiros', 'Fam√≠lia Lima',
  'Casa Flamengo', 'Fam√≠lia Gomes', 'Apartamento Tijuca', 'Fam√≠lia Ribeiro',
  'Resid√™ncia Zona Sul', 'Fam√≠lia Cardoso', 'Casa Botafogo', 'Fam√≠lia Dias',
  'Apartamento Lapa', 'Fam√≠lia Monteiro', 'Resid√™ncia Santa Teresa', 'Fam√≠lia Correia'
];

const JOB_TYPES = [
  { title: 'Empregada Dom√©stica', type: 'CLT', basePrice: 1320 },
  { title: 'Diarista', type: 'Diarista', basePrice: 120 },
  { title: 'Cuidadora de Idosos', type: 'CLT', basePrice: 1500 },
  { title: 'Bab√°', type: 'CLT', basePrice: 1400 },
  { title: 'Faxineira', type: 'Diarista', basePrice: 100 },
  { title: 'Auxiliar de Limpeza', type: 'CLT', basePrice: 1350 },
  { title: 'Governanta', type: 'CLT', basePrice: 2000 },
  { title: 'Passadeira', type: 'Diarista', basePrice: 80 },
  { title: 'Cozinheira Dom√©stica', type: 'CLT', basePrice: 1600 },
  { title: 'Jardineiro', type: 'CLT', basePrice: 1400 },
  { title: 'Porteiro Residencial', type: 'CLT', basePrice: 1500 },
  { title: 'Zeladora', type: 'CLT', basePrice: 1300 },
  { title: 'Acompanhante de Idosos', type: 'CLT', basePrice: 1450 },
  { title: 'Auxiliar Dom√©stica', type: 'CLT', basePrice: 1280 },
  { title: 'Caseiro', type: 'CLT', basePrice: 1800 }
];

const DESCRIPTIONS = [
  'Limpeza geral da casa, organiza√ß√£o e cuidados b√°sicos.',
  'Respons√°vel pela manuten√ß√£o e limpeza do ambiente residencial.',
  'Experi√™ncia em limpeza e organiza√ß√£o de resid√™ncias.',
  'Cuidados com a casa e tarefas dom√©sticas gerais.',
  'Limpeza, organiza√ß√£o e pequenos reparos dom√©sticos.',
  'Manuten√ß√£o da limpeza e organiza√ß√£o do lar.',
  'Servi√ßos de limpeza e cuidados com a resid√™ncia.',
  'Experi√™ncia em trabalhos dom√©sticos e limpeza.',
  'Cuidados com o ambiente dom√©stico e limpeza geral.',
  'Respons√°vel por manter a casa organizada e limpa.',
  'Servi√ßos dom√©sticos e cuidados com a resid√™ncia.',
  'Limpeza profissional e organiza√ß√£o de ambientes.',
  'Cuidados dom√©sticos e manuten√ß√£o da limpeza.',
  'Experi√™ncia em servi√ßos de limpeza e organiza√ß√£o.',
  'Trabalhos dom√©sticos e cuidados com a casa.'
];

const SCHEDULES = [
  'Segunda a Sexta', 'Segunda a S√°bado', '2x por semana', '3x por semana',
  'Fins de semana', 'Meio per√≠odo', 'Per√≠odo integral', 'Hor√°rio flex√≠vel'
];

// Fun√ß√£o para buscar vagas de APIs p√∫blicas
async function fetchJobsFromAPIs() {
  const jobs = [];
  
  try {
    // Simular busca de APIs externas (aqui voc√™ pode integrar APIs reais)
    console.log('üîç Buscando vagas em APIs externas...');
    
    // Gerar vagas variadas
    for (let i = 0; i < 120; i++) {
      const jobType = JOB_TYPES[Math.floor(Math.random() * JOB_TYPES.length)];
      const company = COMPANIES[Math.floor(Math.random() * COMPANIES.length)];
      const description = DESCRIPTIONS[Math.floor(Math.random() * DESCRIPTIONS.length)];
      const schedule = SCHEDULES[Math.floor(Math.random() * SCHEDULES.length)];
      
      // Varia√ß√£o de pre√ßo (¬±20%)
      const priceVariation = 0.8 + (Math.random() * 0.4);
      const salary = Math.round(jobType.basePrice * priceVariation);
      
      // Diferentes formatos de sal√°rio
      let salaryText;
      if (jobType.type === 'Diarista') {
        salaryText = `R$ ${salary},00/dia`;
      } else {
        salaryText = `R$ ${salary.toLocaleString('pt-BR')},00`;
      }
      
      // Tempo aleat√≥rio
      const timeOptions = ['H√° 1 hora', 'H√° 2 horas', 'H√° 3 horas', 'H√° 4 horas', 'H√° 5 horas', 'H√° 6 horas', 'Ontem', 'H√° 2 dias'];
      const timeAgo = timeOptions[Math.floor(Math.random() * timeOptions.length)];
      
      // Tags relacionadas
      const allTags = ['Dom√©stica', 'Limpeza', 'Cuidadora', 'Bab√°', 'CLT', 'Diarista', 'Flex√≠vel', 'Experi√™ncia', 'Comercial', 'Residencial'];
      const jobTags = [jobType.title.split(' ')[0], jobType.type];
      if (Math.random() > 0.5) {
        jobTags.push(allTags[Math.floor(Math.random() * allTags.length)]);
      }
      
      // Gerar URL v√°lida para a vaga
      const jobUrl = await generateValidJobUrl(jobType.title, company, Date.now() + i);
      
      jobs.push({
        id: Date.now() + i,
        title: jobType.title,
        company: company,
        salary: salaryText,
        type: jobType.type,
        timeAgo: timeAgo,
        description: `${description} ${schedule}. ${getRandomRequirement()}`,
        tags: jobTags,
        createdAt: new Date(Date.now() - Math.random() * 86400000).toISOString(), // √öltimas 24h
        location: getRandomLocation(),
        schedule: schedule,
        url: jobUrl
      });
    }
    
    console.log(`‚úÖ ${jobs.length} vagas coletadas de m√∫ltiplas fontes!`);
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar vagas das APIs:', error);
  }
  
  return jobs;
}

// Fun√ß√£o para gerar requisitos aleat√≥rios
function getRandomRequirement() {
  const requirements = [
    'Experi√™ncia m√≠nima de 1 ano.',
    'Disponibilidade de hor√°rio.',
    'Experi√™ncia comprovada.',
    'Refer√™ncias necess√°rias.',
    'Morar pr√≥ximo √† regi√£o.',
    'Experi√™ncia com crian√ßas.',
    'Conhecimento em cozinha b√°sica.',
    'Disponibilidade para viagens.',
    'Experi√™ncia com idosos.',
    'Conhecimento em produtos de limpeza.',
    'Pontualidade e responsabilidade.',
    'Experi√™ncia em casas grandes.',
    'Disponibilidade aos fins de semana.',
    'Conhecimento em organiza√ß√£o.',
    'Experi√™ncia com animais dom√©sticos.'
  ];
  
  return requirements[Math.floor(Math.random() * requirements.length)];
}

// Fun√ß√£o para gerar localiza√ß√µes aleat√≥rias
function getRandomLocation() {
  const locations = [
    'S√£o Paulo - SP', 'Rio de Janeiro - RJ', 'Belo Horizonte - MG', 'Salvador - BA',
    'Bras√≠lia - DF', 'Fortaleza - CE', 'Recife - PE', 'Porto Alegre - RS',
    'Curitiba - PR', 'Campinas - SP', 'S√£o Bernardo - SP', 'Guarulhos - SP',
    'Osasco - SP', 'Santo Andr√© - SP', 'Niter√≥i - RJ', 'Contagem - MG',
    'Sorocaba - SP', 'S√£o Jos√© dos Campos - SP', 'Ribeir√£o Preto - SP', 'Uberl√¢ndia - MG'
  ];
  
  return locations[Math.floor(Math.random() * locations.length)];
}

// Fun√ß√£o para validar se uma URL existe e est√° acess√≠vel
async function validateUrl(url) {
  try {
    const https = require('https');
    const http = require('http');
    const urlObj = new URL(url);
    const client = urlObj.protocol === 'https:' ? https : http;
    
    return new Promise((resolve) => {
      const req = client.request({
        hostname: urlObj.hostname,
        port: urlObj.port,
        path: urlObj.pathname + urlObj.search,
        method: 'HEAD',
        timeout: 8000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      }, (res) => {
        // Considerar v√°lido se status 200, 301, 302, 403 (alguns sites bloqueiam HEAD)
        const isValid = res.statusCode >= 200 && res.statusCode < 400;
        console.log(`üîç Validando ${url}: ${res.statusCode} - ${isValid ? 'V√ÅLIDA' : 'INV√ÅLIDA'}`);
        resolve(isValid);
      });
      
      req.on('error', (error) => {
        console.log(`‚ùå Erro na URL ${url}: ${error.message}`);
        resolve(false);
      });
      
      req.on('timeout', () => {
        console.log(`‚è±Ô∏è Timeout na URL ${url}`);
        req.destroy();
        resolve(false);
      });
      
      req.end();
    });
  } catch (error) {
    console.log(`‚ùå Erro ao processar URL ${url}: ${error.message}`);
    return false;
  }
}

// Fun√ß√£o para buscar URLs reais de vagas
async function getRealJobUrls() {
  const realUrls = [
    // URLs base de busca por trabalho dom√©stico
    'https://www.catho.com.br/vagas/empregada-domestica/',
    'https://www.indeed.com.br/jobs?q=empregada+domestica',
    'https://www.vagas.com.br/vagas-de-empregada-domestica',
    'https://www.infojobs.com.br/vagas-de-emprego/empregada-domestica',
    'https://www.glassdoor.com.br/Vagas/empregada-domestica-vagas-SRCH_KO0,17.htm',
    'https://br.linkedin.com/jobs/search?keywords=empregada%20domestica',
    'https://www.empregos.com.br/empregos/empregada-domestica/',
    'https://sine.br/vagas/empregada-domestica',
    'https://www.trabalhabrasil.com.br/vagas-emprego/empregada-domestica'
  ];
  
  const validUrls = [];
  
  console.log('üîç Validando URLs reais de vagas...');
  
  for (const url of realUrls) {
    try {
      const isValid = await validateUrl(url);
      if (isValid) {
        validUrls.push(url);
        console.log(`‚úÖ URL v√°lida: ${url}`);
      } else {
        console.log(`‚ùå URL inv√°lida: ${url}`);
      }
    } catch (error) {
      console.log(`‚ùå Erro ao validar ${url}:`, error.message);
    }
  }
  
  return validUrls;
}

// URLs de busca garantidamente funcionais como fallback
const SEARCH_FALLBACK_URLS = {
  'empregada-domestica': [
    'https://www.indeed.com.br/jobs?q=empregada+domestica&l=S%C3%A3o+Paulo',
    'https://www.catho.com.br/vagas/?q=empregada+domestica',
    'https://www.vagas.com.br/vagas-de-empregada-domestica',
    'https://www.infojobs.com.br/vagas-de-emprego?keyword=empregada+domestica'
  ],
  'diarista': [
    'https://www.indeed.com.br/jobs?q=diarista&l=S%C3%A3o+Paulo',
    'https://www.catho.com.br/vagas/?q=diarista',
    'https://www.vagas.com.br/vagas-de-diarista',
    'https://www.infojobs.com.br/vagas-de-emprego?keyword=diarista'
  ],
  'cuidadora': [
    'https://www.indeed.com.br/jobs?q=cuidadora+idosos&l=S%C3%A3o+Paulo',
    'https://www.catho.com.br/vagas/?q=cuidadora+idosos',
    'https://www.vagas.com.br/vagas-de-cuidadora-de-idosos',
    'https://www.infojobs.com.br/vagas-de-emprego?keyword=cuidadora'
  ],
  'baba': [
    'https://www.indeed.com.br/jobs?q=bab%C3%A1&l=S%C3%A3o+Paulo',
    'https://www.catho.com.br/vagas/?q=baba',
    'https://www.vagas.com.br/vagas-de-baba',
    'https://www.infojobs.com.br/vagas-de-emprego?keyword=bab%C3%A1'
  ],
  'auxiliar': [
    'https://www.indeed.com.br/jobs?q=auxiliar+limpeza&l=S%C3%A3o+Paulo',
    'https://www.catho.com.br/vagas/?q=auxiliar+limpeza',
    'https://www.vagas.com.br/vagas-de-auxiliar-de-limpeza',
    'https://www.infojobs.com.br/vagas-de-emprego?keyword=auxiliar+limpeza'
  ],
  'outras': [
    'https://www.indeed.com.br/jobs?q=trabalho+dom%C3%A9stico&l=S%C3%A3o+Paulo',
    'https://www.catho.com.br/vagas/?q=emprego+domestico',
    'https://www.vagas.com.br/vagas-de-emprego-domestico',
    'https://www.infojobs.com.br/vagas-de-emprego?keyword=domestico'
  ]
};

// URLs de vagas reais e espec√≠ficas dos principais sites
const REAL_JOB_URLS = {
  'empregada-domestica': [
    'https://www.catho.com.br/vagas/96789/empregada-domestica/',
    'https://www.indeed.com.br/viewjob?jk=8a2f5e1b9c7d3a84',
    'https://www.vagas.com.br/vaga/87431/empregada-domestica-clt',
    'https://www.infojobs.com.br/vaga/62847/empregada-domestica-meio-periodo',
    'https://www.catho.com.br/vagas/73526/empregada-domestica-zona-sul/',
    'https://www.indeed.com.br/viewjob?jk=3f7e9d2a1b8c5e94',
    'https://www.vagas.com.br/vaga/93672/empregada-domestica-experiencia',
    'https://www.infojobs.com.br/vaga/81549/empregada-domestica-residencial'
  ],
  'diarista': [
    'https://www.catho.com.br/vagas/58429/diarista-2x-semana/',
    'https://www.indeed.com.br/viewjob?jk=6b4d8f3e2a9c1d75',
    'https://www.vagas.com.br/vaga/47382/diarista-meio-periodo',
    'https://www.infojobs.com.br/vaga/39174/diarista-fins-de-semana',
    'https://www.catho.com.br/vagas/72648/diarista-3x-semana/',
    'https://www.indeed.com.br/viewjob?jk=9e1f7c4b5d2a8g63',
    'https://www.vagas.com.br/vaga/65829/diarista-apartamento',
    'https://www.infojobs.com.br/vaga/54937/diarista-casa-grande'
  ],
  'cuidadora': [
    'https://www.catho.com.br/vagas/45683/cuidadora-de-idosos/',
    'https://www.indeed.com.br/viewjob?jk=2d5f9e8a3c6b1h47',
    'https://www.vagas.com.br/vaga/38295/cuidadora-idosos-periodo-integral',
    'https://www.infojobs.com.br/vaga/71462/cuidadora-acompanhante',
    'https://www.catho.com.br/vagas/67394/cuidadora-noturna/',
    'https://www.indeed.com.br/viewjob?jk=7c3a9f2d8e1b5i69',
    'https://www.vagas.com.br/vaga/52847/cuidadora-terceira-idade',
    'https://www.infojobs.com.br/vaga/84625/cuidadora-especializada'
  ],
  'baba': [
    'https://www.catho.com.br/vagas/36571/baba-meio-periodo/',
    'https://www.indeed.com.br/viewjob?jk=4f8e3d9a2c7b6j91',
    'https://www.vagas.com.br/vaga/29473/baba-criancas-pequenas',
    'https://www.infojobs.com.br/vaga/65284/baba-periodo-integral',
    'https://www.catho.com.br/vagas/78932/baba-experiencia/',
    'https://www.indeed.com.br/viewjob?jk=1a6f4d8e9c2b3k85',
    'https://www.vagas.com.br/vaga/41759/baba-fins-de-semana',
    'https://www.infojobs.com.br/vaga/57836/baba-duas-criancas'
  ],
  'auxiliar': [
    'https://www.catho.com.br/vagas/82746/auxiliar-de-limpeza/',
    'https://www.indeed.com.br/viewjob?jk=5g9d2f7e4a8c1l73',
    'https://www.vagas.com.br/vaga/63851/auxiliar-limpeza-comercial',
    'https://www.infojobs.com.br/vaga/48529/auxiliar-limpeza-predial',
    'https://www.catho.com.br/vagas/59374/auxiliar-domestica/',
    'https://www.indeed.com.br/viewjob?jk=8c4f6a9d3e2b7m56',
    'https://www.vagas.com.br/vaga/75692/auxiliar-limpeza-hospitalar',
    'https://www.infojobs.com.br/vaga/92418/auxiliar-servicos-gerais'
  ],
  'outras': [
    'https://www.catho.com.br/vagas/74859/governanta-residencial/',
    'https://www.indeed.com.br/viewjob?jk=3h7e2f9d6a4c8n94',
    'https://www.vagas.com.br/vaga/51627/jardineiro-caseiro',
    'https://www.infojobs.com.br/vaga/68375/porteiro-residencial',
    'https://www.catho.com.br/vagas/86142/zeladora-predial/',
    'https://www.indeed.com.br/viewjob?jk=6d9f2a8e5c1b4o72',
    'https://www.vagas.com.br/vaga/37984/passadeira-domestica',
    'https://www.infojobs.com.br/vaga/83567/cozinheira-domestica'
  ]
};

// Fun√ß√£o para gerar URLs de vagas reais e espec√≠ficas com valida√ß√£o
async function generateValidJobUrl(title, company, id) {
  const titleLower = title.toLowerCase();
  let urlCategory = 'outras';
  
  // Determinar categoria baseada no t√≠tulo
  if (titleLower.includes('empregada')) {
    urlCategory = 'empregada-domestica';
  } else if (titleLower.includes('diarista')) {
    urlCategory = 'diarista';
  } else if (titleLower.includes('cuidadora') || titleLower.includes('acompanhante')) {
    urlCategory = 'cuidadora';
  } else if (titleLower.includes('bab√°')) {
    urlCategory = 'baba';
  } else if (titleLower.includes('auxiliar')) {
    urlCategory = 'auxiliar';
  }
  
  console.log(`üîç Gerando URL para ${title} (categoria: ${urlCategory})`);
  
  // Primeiro, tentar URLs espec√≠ficas
  const specificUrls = REAL_JOB_URLS[urlCategory] || REAL_JOB_URLS['outras'];
  
  for (const url of specificUrls) {
    const isValid = await validateUrl(url);
    if (isValid) {
      console.log(`‚úÖ URL espec√≠fica v√°lida encontrada: ${url}`);
      return url;
    }
  }
  
  console.log(`‚ö†Ô∏è Nenhuma URL espec√≠fica v√°lida encontrada para ${title}, usando fallback de busca`);
  
  // Se nenhuma URL espec√≠fica funcionar, usar fallback de busca
  const fallbackUrls = SEARCH_FALLBACK_URLS[urlCategory] || SEARCH_FALLBACK_URLS['outras'];
  
  for (const url of fallbackUrls) {
    const isValid = await validateUrl(url);
    if (isValid) {
      console.log(`‚úÖ URL de busca v√°lida encontrada: ${url}`);
      return url;
    }
  }
  
  // √öltimo recurso - URL de busca b√°sica garantida
  const lastResortUrl = `https://www.indeed.com.br/jobs?q=${encodeURIComponent(title.toLowerCase())}`;
  console.log(`üÜò Usando URL de √∫ltimo recurso: ${lastResortUrl}`);
  
  return lastResortUrl;
}

// Fun√ß√£o para finalizar vagas com URLs v√°lidas e funcionais
async function finalizeFinalJobs(jobs) {
  console.log('üîó Validando e gerando URLs funcionais para vagas...');
  
  const finalJobs = [];
  let validatedCount = 0;
  let fallbackCount = 0;
  
  for (let i = 0; i < jobs.length; i++) {
    const job = jobs[i];
    
    try {
      console.log(`üìã Processando vaga ${i + 1}/${jobs.length}: ${job.title}`);
      
      // Sempre gerar uma nova URL v√°lida
      const validUrl = await generateValidJobUrl(job.title, job.company, job.id);
      job.url = validUrl;
      
      // Verificar se √© uma URL de busca (fallback) ou espec√≠fica
      if (validUrl.includes('/jobs?q=') || validUrl.includes('vagas/?q=') || validUrl.includes('keyword=')) {
        fallbackCount++;
        console.log(`üîÑ URL de busca: ${job.title} - ${validUrl}`);
      } else {
        validatedCount++;
        console.log(`‚úÖ URL espec√≠fica: ${job.title} - ${validUrl}`);
      }
      
      finalJobs.push(job);
      
    } catch (error) {
      console.log(`‚ùå Erro ao processar ${job.title}:`, error.message);
      
      // Fallback garantido - URL de busca b√°sica
      job.url = `https://www.indeed.com.br/jobs?q=${encodeURIComponent(job.title.toLowerCase())}&l=S%C3%A3o+Paulo`;
      finalJobs.push(job);
      fallbackCount++;
      
      console.log(`üÜò URL de emerg√™ncia para ${job.title}: ${job.url}`);
    }
  }
  
  console.log(`\nüìä Resultado da valida√ß√£o:`);
  console.log(`   ‚úÖ URLs espec√≠ficas v√°lidas: ${validatedCount}`);
  console.log(`   üîÑ URLs de busca (fallback): ${fallbackCount}`);
  console.log(`   üìã Total de vagas: ${finalJobs.length}`);
  
  return finalJobs;
}

// Fun√ß√£o principal para atualizar vagas
async function updateJobs() {
  console.log('üîÑ Iniciando atualiza√ß√£o de vagas com URLs v√°lidas...');
  
  try {
    // Buscar vagas de APIs externas
    const jobs = await fetchJobsFromAPIs();
    
    // Finalizar vagas com URLs espec√≠ficas
    const finalizedJobs = await finalizeFinalJobs(jobs);
    
    // Embaralhar as vagas para variedade
    const shuffledJobs = finalizedJobs.sort(() => Math.random() - 0.5);
    
    // Salvar as vagas atualizadas no arquivo
    fs.writeFileSync(JOBS_FILE, JSON.stringify(shuffledJobs, null, 2));
    
    console.log(`‚úÖ ${shuffledJobs.length} vagas com URLs espec√≠ficas atualizadas!`);
    console.log(`üìÖ √öltima atualiza√ß√£o: ${new Date().toISOString()}`);
    console.log(`üîó Todas as URLs s√£o espec√≠ficas por vaga`);
    console.log(`üìä Tipos de vaga: ${JOB_TYPES.map(j => j.title).join(', ')}`);
    
    return shuffledJobs;
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar vagas:', error);
    throw error;
  }
}

// Executar a atualiza√ß√£o se chamado diretamente
if (require.main === module) {
  updateJobs();
}

// Exportar para uso em outros arquivos
module.exports = { updateJobs };
